<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Penguin.Persistence.Repositories</name>
    </assembly>
    <members>
        <member name="T:Penguin.Persistence.Repositories.DependencyInjection.DependencyRegistrations">
            <summary>
            Contains the interface that automatically registers IRepository implementations for KeyedObject types, as well as IPersistenceContexts
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.DependencyInjection.DependencyRegistrations.RegisterDependencies(Penguin.DependencyInjection.Abstractions.Interfaces.IServiceRegister)">
            <summary>
            Registers the dependencies
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.DependencyInjection.RepositoryHelper.GetRepositoriesAndBaseTypes">
            <summary>
            Reflects over all current assembly types to find anything implementing the IRepository&lt;T&gt; interface
            </summary>
            <returns>A list of tuples containing the Repository Type as well as the Type of the entity it manages</returns>
        </member>
        <member name="T:Penguin.Persistence.Repositories.Interfaces.IKeyedObjectRepository">
            <summary>
            A non-generic interface for a keyed object repository allowing for data access without knowing the underlying object type for the repository
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.Interfaces.IKeyedObjectRepository.Find(System.Int32)">
            <summary>
            Gets an object by its ID property
            </summary>
            <param name="Id">The ID property to get</param>
            <returns>An object (or null) matching the ID</returns>
        </member>
        <member name="M:Penguin.Persistence.Repositories.Interfaces.IKeyedObjectRepository.FindRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets an IEnumerable of objects containing any that match the requested ID's
            </summary>
            <param name="Ids">The Ids to check for</param>
            <returns>an IEnumerable of objects containing any that match the requested ID's</returns>
        </member>
        <member name="T:Penguin.Persistence.Repositories.Interfaces.IKeyedObjectRepository`1">
            <summary>
            An interface representing a repository that manages objects deriving from KeyedObject
            </summary>
            <typeparam name="T">Any KeyedObject type</typeparam>
        </member>
        <member name="M:Penguin.Persistence.Repositories.Interfaces.IKeyedObjectRepository`1.Find(System.Int32)">
            <summary>
            Gets an object by its ID property
            </summary>
            <param name="Id">The ID property to get</param>
            <returns>An object (or null) matching the ID</returns>
        </member>
        <member name="M:Penguin.Persistence.Repositories.Interfaces.IKeyedObjectRepository`1.FindRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets an IEnumerable of objects containing any that match the requested ID's
            </summary>
            <param name="Ids">The Ids to check for</param>
            <returns>an IEnumerable of objects containing any that match the requested ID's</returns>
        </member>
        <member name="T:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1">
            <summary>
            Base repository for any objects inheriting from "Keyed Object"
            </summary>
            <typeparam name="T">Any object type inheriting from "KeyedObject" </typeparam>
        </member>
        <member name="P:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.All">
            <summary>
            Returns the (possibly) overridden IQueryable used to access database by the underlying persistence context
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.Context">
            <summary>
            The underlying persistence context that handles saving of the data this repository is accessing
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.ElementType">
            <summary>
            Returns the element type of the underlying persistence context
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.Expression">
            <summary>
            Returns the current expressions of the underlying persistence context
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.IsValid">
            <summary>
            Returns a bool indicating whether or not the underlying persistence context contains a set for storing the
            type represented by this repository
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.Provider">
            <summary>
            Returns the Provider of the underlying PersistenceContext
            </summary>
        </member>
        <member name="P:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.MessageBus">
            <summary>
            An optional message bus for sending out persistence event messages
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.#ctor(Penguin.Persistence.Abstractions.Interfaces.IPersistenceContext{`0},Penguin.Messaging.Core.MessageBus)">
            <summary>
            Constructs a new instance of this repository
            </summary>
            <param name="context">A persistence context allowing for persistence of the objects this repository manages</param>
            <param name="messageBus">An optional message bus for sending out persistence event messages</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.Add(`0)">
            <summary>
            Adds a new object to the context
            </summary>
            <param name="o">The object to add</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.AddCopy(`0)">
            <summary>
            ShallowClones an object, resets the key, and then calls Add
            </summary>
            <param name="o">The object to clone</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.Penguin#Persistence#Abstractions#Interfaces#IRepository#AddCopy(System.Object)">
            <summary>
            ShallowClones an object, resets the key, and then calls Add
            </summary>
            <param name="o">The object to clone</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.AddOrUpdate(`0)">
            <summary>
            Updates an object or adds it if it does not exist
            </summary>
            <param name="o">The object to add or update</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.AddOrUpdateCopy(`0)">
            <summary>
            ShallowClones an object, resets the key, and then calls AddOrUpdate
            </summary>
            <param name="o">The object to clone</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.Penguin#Persistence#Abstractions#Interfaces#IRepository#AddOrUpdateCopy(System.Object)">
            <summary>
            ShallowClones an object, resets the key, and then calls AddOrUpdate
            </summary>
            <param name="o">The object to clone</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.AddOrUpdateRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of new objects or updates existing objects if they already exist
            </summary>
            <param name="o">The objects to add or update</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of new objects
            </summary>
            <param name="o">The objects to add</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.CancelWrite">
            <summary>
            Cancels any open write contexts and prevents changes from persisting
            </summary>
        </member>
        <member name="M:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.Commit(Penguin.Persistence.Abstractions.Interfaces.IWriteContext)">
            <summary>
            If all WriteContexts have been deregistered, this should persist any changes to the underlying data store
            </summary>
            <param name="writeContext">The IWriteContext that has finished making changes</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.CommitASync(Penguin.Persistence.Abstractions.Interfaces.IWriteContext)">
            <summary>
            If all WriteContexts have been deregistered, this should persist any changes to the underlying data store in an ASYNC manner
            </summary>
            <param name="writeContext">The IWriteContext that has finished making changes</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.Delete(`0)">
            <summary>
            Deletes an object from the persistence context
            </summary>
            <param name="o">The object to delete</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.DeleteRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Deletes multiple objects from the persistence context
            </summary>
            <param name="o">The objects to delete</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.Find(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Gets an IEnumerable of objects from the Persistence Context that match the provided list. Useful for refreshing from the context
            </summary>
            <param name="o">The matching objects to return</param>
            <returns>The matching objects</returns>
        </member>
        <member name="M:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.Find(System.Int32)">
            <summary>
            Finds a KeyedObject by its int Id
            </summary>
            <param name="Id">The Id to find</param>
            <returns>An object with a matching ID or null</returns>
        </member>
        <member name="M:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.Find(System.Object)">
            <summary>
            Finds the object by the key
            </summary>
            <param name="Key">The key to find</param>
            <returns>Any matching object or null</returns>
        </member>
        <member name="M:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.FindRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Finds a number of objects with matching Ids
            </summary>
            <param name="Ids">The Ids to find</param>
            <returns>Objects that match the Id</returns>
        </member>
        <member name="M:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.GetEnumerator">
            <summary>
            This returns the Enumerator for the underlying IQueryable
            </summary>
            <returns>The Enumerator for the underlying IQueryable</returns>
        </member>
        <member name="M:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.OfType``1">
            <summary>
            Returns objects from the repository of the specified type, for repositories where more than one type exist
            </summary>
            <typeparam name="TDerived">The type to return</typeparam>
            <returns></returns>
        </member>
        <member name="M:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.ShallowClone(`0)">
            <summary>
            ShallowClones an object and resets its key
            </summary>
            <param name="o">The object to clone</param>
            <returns>The ShallowClone</returns>
        </member>
        <member name="M:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.ShallowClone(System.Object)">
            <summary>
            ShallowClones an object and resets its Key
            </summary>
            <param name="o">The object to shallow clone</param>
            <returns></returns>
        </member>
        <member name="M:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.Update(`0)">
            <summary>
            Updates an object but does not add it to the context if it does not exist
            </summary>
            <param name="o">The object to update</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.UpdateRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Updates a range of objects but does not add them to the context if they do not exist
            </summary>
            <param name="o">The objects to update</param>
        </member>
        <member name="M:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Allows for a "Where" call on a non generic instance by converting the provided expression tree to the implemented type
            </summary>
            <typeparam name="T1">An assumed type/base for this non-generic instance of the repository</typeparam>
            <param name="predicate">The Expression to pass to the underlying IQueryable</param>
            <returns>The results of evaluating the expression against the underlying IQueryable</returns>
        </member>
        <member name="M:Penguin.Persistence.Repositories.Repositories.KeyedObjectRepository`1.WriteContext">
            <summary>
            Returns a new write context for the underlying persistence context
            </summary>
            <returns> a new write context for the underlying persistence context</returns>
        </member>
    </members>
</doc>